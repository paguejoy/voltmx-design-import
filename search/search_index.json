{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"foundry/Foundry/","text":"Foundry How to create a foundry server instance Login to Quickstart Click Login with Github https://www.qs.hcllabs.net/login You will see all the running servers To create a new server, select New then choose the server instance you wish to create. For this example, I will select qs-foundry server Fill out the necessary fields: Server Name Latest Application Version Custom Value to default value Next screen will show you this: You may go back to the Running tab to see the status of your new qs foundry instance select the blue arrow icon to start up the application Existing Foundry Server If you are to access an existing server, click the blue arrow icon to start up the foundry console You are to provide your credentials to be able to login. Example: Foundry Console Dashboard Make sure you have an access to the foundry console. See example of list of users below If you are not an existing user, contact your admin/team lead to give you access to the foundry console.","title":"Foundry"},{"location":"foundry/Foundry/#foundry","text":"","title":"Foundry"},{"location":"foundry/Foundry/#how-to-create-a-foundry-server-instance","text":"Login to Quickstart Click Login with Github https://www.qs.hcllabs.net/login You will see all the running servers To create a new server, select New then choose the server instance you wish to create. For this example, I will select qs-foundry server Fill out the necessary fields: Server Name Latest Application Version Custom Value to default value Next screen will show you this: You may go back to the Running tab to see the status of your new qs foundry instance select the blue arrow icon to start up the application","title":"How to create a foundry server instance"},{"location":"foundry/Foundry/#existing-foundry-server","text":"If you are to access an existing server, click the blue arrow icon to start up the foundry console You are to provide your credentials to be able to login. Example: Foundry Console Dashboard Make sure you have an access to the foundry console. See example of list of users below If you are not an existing user, contact your admin/team lead to give you access to the foundry console.","title":"Existing Foundry Server"},{"location":"foundry/Keep/","text":"KEEP How to create a keep server instance Login to Quickstart Click Login with Github https://www.qs.hcllabs.net/login You will see all the running servers To create a new server, select New then choose the server instance you wish to create. For this example, I will select qs-keep server Fill out the necessary fields: Server Name Latest Application Version Domino Admin First Name Domino Admin Last Name Domino Admin Password Domino Admin Server Domain Name Domino Org Name Domino Server Name It is adviced to use the same value of the placeholder value showing in the fields Next screen will show you this You may go back to the Running tab to see the status of your new qs foundry instance Once done, select the blue arrow icon to start up the application","title":"KEEP"},{"location":"foundry/Keep/#keep","text":"","title":"KEEP"},{"location":"foundry/Keep/#how-to-create-a-keep-server-instance","text":"Login to Quickstart Click Login with Github https://www.qs.hcllabs.net/login You will see all the running servers To create a new server, select New then choose the server instance you wish to create. For this example, I will select qs-keep server Fill out the necessary fields: Server Name Latest Application Version Domino Admin First Name Domino Admin Last Name Domino Admin Password Domino Admin Server Domain Name Domino Org Name Domino Server Name It is adviced to use the same value of the placeholder value showing in the fields Next screen will show you this You may go back to the Running tab to see the status of your new qs foundry instance Once done, select the blue arrow icon to start up the application","title":"How to create a keep server instance"},{"location":"iris/debugger/","text":"Debuger Remove --disable-devtools On the root folder of 'konywebstudio,' open the file named 'package.json' ( Note : Revert this change before committing, or don't include this file on the commit) Go to line no. 9, where the key name is \"chromium-args\" Remove the snippet '--disable=devtools' from the value Open the file named run_mac.sh (for Mac) or run_win.bat (for Windows) Add the following snippet of code in between \"\u2026Iris\" and the dot (.) --remote-debugging-port=9876 Once you're done, run iris via the command For Mac ./run_mac.sh For Windows run_win.bat Go to a browser, and type in localhost:9876 The links above serves different purpose: The first one is for the frontend side of the application. You will work on mostly in this page . Second is just for the splash screen. The least important and rarely use. Third is for backend request. This is mostly related to the lib folder of konywebstudio. Click item that you want to debug and it looks like this. You can add now a breakpoint. This is what it should look like in the browser. You can now add debug anywhere in konywebstudio code as a breakpoint. Debugging How to add breakpoints? public/desktopweb folder holds the frontend codes of iris and the codes here can be observed using a debugger. Either by: Adding a debugger inline within the code (this is not highly recommended and make sure that before you push it to the repository, you have remove this already) Adding a breakpoint in the source panel of the web inspector. It is highly recommended to use the source panel of your browser to make the breakpoints only for your use and will not affect the codes in general. click the first link of the inspectable pages Click on source tab Look at the files that you want to debug (folder structure of public/desktopweb) Click on the line that you will observe by clicking the line code number, example line 529 And trigger it using the IRIS app. Make sure that the localhost:9876 is enabled in the browser before you make the action in the app. You will notice that the IRIS application will stop if its already hit the line that you are trying to break You can make use of the icons on the right side of the source panel to resume, step over, step into the codes If you are going to restart the application, make you that you will restart also the web inspector browser since it will be disabled once you stop running the application. How to copy variables in breakpoints For example you are now observing the using the breakpoints and debugger and you wanted to have a copy of the variables being passed into each function, you can: Look for the variable that you want on the right side of the source panel. For example we have menuItem variable. (as long as the variable has been called already, then you can see it under the \"local\" section Right click on the variable and select \"store as global variable\" You will notice on the bottom part of the source panel, there is a console that shows some details about the variable and also a variable name (temp1) . Temp1 is the name of the temporary variable where the menuItem is being stored. To copy this on your clipboard, type on the console \"copy(temp1)\" and hit enter. Even though it says undefined, the value is still save on your clipboard so make sure to paste it somewhere before you copy new values You can store as many temp variable as you can, but make sure to change the variable name on the \"copy\" command. There are some variables that cant be properly copied like the example below since this one is a Class. So you need to dig into the class variable and look for the specific object that you want to observer within that.","title":"Debugger"},{"location":"iris/debugger/#debuger","text":"","title":"Debuger"},{"location":"iris/debugger/#remove-disable-devtools","text":"On the root folder of 'konywebstudio,' open the file named 'package.json' ( Note : Revert this change before committing, or don't include this file on the commit) Go to line no. 9, where the key name is \"chromium-args\" Remove the snippet '--disable=devtools' from the value Open the file named run_mac.sh (for Mac) or run_win.bat (for Windows) Add the following snippet of code in between \"\u2026Iris\" and the dot (.) --remote-debugging-port=9876 Once you're done, run iris via the command For Mac ./run_mac.sh For Windows run_win.bat Go to a browser, and type in localhost:9876 The links above serves different purpose: The first one is for the frontend side of the application. You will work on mostly in this page . Second is just for the splash screen. The least important and rarely use. Third is for backend request. This is mostly related to the lib folder of konywebstudio. Click item that you want to debug and it looks like this. You can add now a breakpoint. This is what it should look like in the browser. You can now add debug anywhere in konywebstudio code as a breakpoint.","title":"Remove --disable-devtools"},{"location":"iris/debugger/#debugging","text":"","title":"Debugging"},{"location":"iris/debugger/#how-to-add-breakpoints","text":"public/desktopweb folder holds the frontend codes of iris and the codes here can be observed using a debugger. Either by: Adding a debugger inline within the code (this is not highly recommended and make sure that before you push it to the repository, you have remove this already) Adding a breakpoint in the source panel of the web inspector. It is highly recommended to use the source panel of your browser to make the breakpoints only for your use and will not affect the codes in general. click the first link of the inspectable pages Click on source tab Look at the files that you want to debug (folder structure of public/desktopweb) Click on the line that you will observe by clicking the line code number, example line 529 And trigger it using the IRIS app. Make sure that the localhost:9876 is enabled in the browser before you make the action in the app. You will notice that the IRIS application will stop if its already hit the line that you are trying to break You can make use of the icons on the right side of the source panel to resume, step over, step into the codes If you are going to restart the application, make you that you will restart also the web inspector browser since it will be disabled once you stop running the application.","title":"How to add breakpoints?"},{"location":"iris/debugger/#how-to-copy-variables-in-breakpoints","text":"For example you are now observing the using the breakpoints and debugger and you wanted to have a copy of the variables being passed into each function, you can: Look for the variable that you want on the right side of the source panel. For example we have menuItem variable. (as long as the variable has been called already, then you can see it under the \"local\" section Right click on the variable and select \"store as global variable\" You will notice on the bottom part of the source panel, there is a console that shows some details about the variable and also a variable name (temp1) . Temp1 is the name of the temporary variable where the menuItem is being stored. To copy this on your clipboard, type on the console \"copy(temp1)\" and hit enter. Even though it says undefined, the value is still save on your clipboard so make sure to paste it somewhere before you copy new values You can store as many temp variable as you can, but make sure to change the variable name on the \"copy\" command. There are some variables that cant be properly copied like the example below since this one is a Class. So you need to dig into the class variable and look for the specific object that you want to observer within that.","title":"How to copy variables in breakpoints"},{"location":"iris/designImport/","text":"Design Import How to connect Iris to Foundry server: Go to the menu bar, go to Volt MX Iris > Preferences: Mac Windows On the Volt MX Foundry tab, type in the Foundry URL: https://vmxgo-design-import-qs-foundry.qs.hcllabs.net and click Validate then Done Make sure to have an account on the foundry qs server. Your name should be listed in the users' list. If you don't have it, ask the admin to create one for you On the top right corner of Iris, click Login. And type in you credentials. (Example, Email: timothykenneth.arcet@hcl.com, Password: Pass123$) You can now try the Migration tool on Iris. Go to Project > Import > Domino Applications On the Keep Identity service, a prompt will appear. Type in the credentials, Username : admin keep, Password : passw0rd Design Import Wizard Code Structure Wizard folder are composed of different files like: public/desktopweb/app/wizard/domino/index.js This is where you need to declare the screens that you are going to import within the wizard. public/desktopweb/app/wizard/domino/utils.js You don\u2019t need to modify this unless you want to add new features to wizard that will affect / will be used across all screens. public/desktopweb/app/wizard/domino/constants.js This is for any constants variables that will be used across all screen. The most important line here is the STEPS object (should be the last part) since if you need to add new screen, then you need to add a new value here. public/desktopweb/app/wizard/domino/< screen-name >/viewConfig.js This is the declaration of the screen including its properties, modules and components. You will need to import these in index.js if you are going to declare this as part of the wizard flow. Sample create new screen To create a new screen, the instructions are below: Create a folder for that new screen. (You will notice that for each screen there is a specific folder created.) a. Name the folder based on the functionality of the screen (camelCase). And then create viewConfig.js inside of it Contents of viewConfig.js a. You can copy the contents of viewConfig.js on any file or you can use the template below. Just change all the text that has CHANGETHIS based on the proper values viewConfig.js-Template b. Make sure to change the following Script guard details - it should be the path of the screen Example: c. Defining and using modules If there are other modules that you need to use in the screen, then you need to import it in this line of code. But the default one is always the constants and then the utils Example of adding modules (Here you are adding the 4 different modules inside the screen (see public/desktopweb/app/wizard/domino/gettingStarted/viewConfig.js as an example) Take note that the arrangement of the declaration matters since that\u2019s how konywebstudio import external modules. For example, modules/mf/mfUtils is the third one under the define array, it should be third parameter on the function parameters as well. The arrangement tells which one to reference to. Then the variable within the function parameter will be the string to use within the screen. For example d. Get function This is the only function that will be return and exposed outside the screen. (The return value of this function will define the structure and contents of the screen.) e. Rows content e.1. This is usually the contents of the return value of get function. View, id and classList are already default and you should avoid modifying these. e.2. The contents of the screen is define by row. For example the first item on the row array is the close button. Then the first line that will be shown on the screen is the close button. e.3. Next item in the array is the new line of the row which is the Getting started title. e.4. There is a certain format when declaring components within the screen. Please refer to some examples on other screens on how to add title, label, input field, buttons etc. For the example above, we have that format for adding a step title label e.5. All component that can be add with the wizard screen can be check in this folder: public/desktopweb/app/ui/views e.6. The last item on the rows arrays should be the footer buttons, which is ideally the next, back or submit button - f.1. This is usually fetchin the pcUtils.getFooterConfig function and we just need to declare what are the buttons on the right or left side of the footer. For example: e.7. wizard.navigateTo( * step Screen * ) this is where you need to declare which screen should be showns based on the added button. Declare the new screen in constants.js a. After you have setup the new screen, go to public/desktopweb/app/wizard/domino/constants.js b. Add a new item to STEPS object using the SNAKE_CASE format and the folder name (camelCase) c. The arrangement is based on the steps of the wizard flow. For example we want to add the new screen after the getting started, then we will add the new item after the GETTING_STARTED item. Declare the new screen in index.js a. To formally add the new screen within the wizard flow, go to public/desktopweb/app/wizard/domino/index.js b. Declare the new screen in the define section of the index.js . Take note of the arrangement of the declaration. If you add it as the fourth item, then the new function parameter should be on the fourth item c. Under the steps config, add a new array for the new screen. Since in our example we will add it after the Getting started screen, then we should add a new array after the Getting started array (Take note of the STEPS.ADD_NEW_SCREEN and the value of the getViewConfig. These are the values that we set on the constants.js and the define function) d. Even though we already declare the new screen in index.js, we still need to included this in one of the screens of the wizard. For example, we are assuming that after clicking the get started button in GETTING_STARTED screen, we will be redirected to the new screen e. We need to change the wizard.navigateTo of the getting started screen to redirect us to the ADD_NEW_SCREEN f. For every changes that we did on the code, we need to restart the IRIS app. Current Flow SUBJECT TO CHANGE BASED ON REQUIREMENTS Getting Started Some description on what to expect on the wizard, parameters that are needed initially Associate Foundry App Before we can make use of the app, we need to make sure that there is already a foundry app linked to the current iris project. We can create a new one or use an existing one Unlink app is not working yet. Create Keep Services This is where we initialize the keep services in the foundry Only the Create New option is working. The select option is for development For the Create New, it will ask all the necessary details in creating keep services After adding all the details, a new set of keep integration services will be created in foundry The details of these needs to be updated. Connect to Keep Identity service You will be ask to login to keep identity service NSF Selection You will choose which nsf file to migrate. This will be improve later on Data Analysis This is where the pitcairn application will start. Ideally we will scan first the application and analyze the contents. Migration Option We have different routes to take but this is still subject to change. Always choose the first option Generate Forms After analyzing and determining the contents to be migrated, generating forms will be the next one Generate Foundry Services If there are still foundry services that needs to be migrated, we will add this in this part of the screen No functionality has been added yet on this part Connect to Foundry If there are mappings yet to be added Result Show if the migration is success or not Adding Modules Modules are essential piece of the konywebstudio, you can mostly see the codes within kony as reusable set of codes that can be imported almost anywhere in the codes (but with certain format and exception of course) You will see all the modules, especially for the frontend side of IRIS in : public/desktopweb/app/modules If there are functions that are not available in konywebstudio, we need to create a module for that and we can create it under: public/desktopweb/app/modules/migration IMPORTANT: AVOID MODIFYING ANY MODULES THAT ARE NOT RELATED TO DESIGN IMPORT. PLEASE CONSULT IF YOU NEED TO MODIFY ONE Creating new module The usual format of a new module file is the following: Script guard Define function Return value Creating functions within module You can create it in two ways Using normal function return Using ns function (widely used in kony) (This utilizes ns parameter and strictly follow the format above.) This utilizes ns parameter and strictly follow the format above. Importing module into another module In order to define or reuse the module, you can declare it in define function method as mentioned in other section. Just take note that the path that you will add in the define method will depend on where the file is located","title":"Design Import"},{"location":"iris/designImport/#design-import","text":"","title":"Design Import"},{"location":"iris/designImport/#how-to-connect-iris-to-foundry-server","text":"Go to the menu bar, go to Volt MX Iris > Preferences: Mac Windows On the Volt MX Foundry tab, type in the Foundry URL: https://vmxgo-design-import-qs-foundry.qs.hcllabs.net and click Validate then Done Make sure to have an account on the foundry qs server. Your name should be listed in the users' list. If you don't have it, ask the admin to create one for you On the top right corner of Iris, click Login. And type in you credentials. (Example, Email: timothykenneth.arcet@hcl.com, Password: Pass123$) You can now try the Migration tool on Iris. Go to Project > Import > Domino Applications On the Keep Identity service, a prompt will appear. Type in the credentials, Username : admin keep, Password : passw0rd","title":"How to connect Iris to Foundry server:"},{"location":"iris/designImport/#design-import-wizard","text":"","title":"Design Import Wizard"},{"location":"iris/designImport/#code-structure","text":"Wizard folder are composed of different files like: public/desktopweb/app/wizard/domino/index.js This is where you need to declare the screens that you are going to import within the wizard. public/desktopweb/app/wizard/domino/utils.js You don\u2019t need to modify this unless you want to add new features to wizard that will affect / will be used across all screens. public/desktopweb/app/wizard/domino/constants.js This is for any constants variables that will be used across all screen. The most important line here is the STEPS object (should be the last part) since if you need to add new screen, then you need to add a new value here. public/desktopweb/app/wizard/domino/< screen-name >/viewConfig.js This is the declaration of the screen including its properties, modules and components. You will need to import these in index.js if you are going to declare this as part of the wizard flow.","title":"Code Structure"},{"location":"iris/designImport/#sample-create-new-screen","text":"To create a new screen, the instructions are below: Create a folder for that new screen. (You will notice that for each screen there is a specific folder created.) a. Name the folder based on the functionality of the screen (camelCase). And then create viewConfig.js inside of it Contents of viewConfig.js a. You can copy the contents of viewConfig.js on any file or you can use the template below. Just change all the text that has CHANGETHIS based on the proper values viewConfig.js-Template b. Make sure to change the following Script guard details - it should be the path of the screen Example: c. Defining and using modules If there are other modules that you need to use in the screen, then you need to import it in this line of code. But the default one is always the constants and then the utils Example of adding modules (Here you are adding the 4 different modules inside the screen (see public/desktopweb/app/wizard/domino/gettingStarted/viewConfig.js as an example) Take note that the arrangement of the declaration matters since that\u2019s how konywebstudio import external modules. For example, modules/mf/mfUtils is the third one under the define array, it should be third parameter on the function parameters as well. The arrangement tells which one to reference to. Then the variable within the function parameter will be the string to use within the screen. For example d. Get function This is the only function that will be return and exposed outside the screen. (The return value of this function will define the structure and contents of the screen.) e. Rows content e.1. This is usually the contents of the return value of get function. View, id and classList are already default and you should avoid modifying these. e.2. The contents of the screen is define by row. For example the first item on the row array is the close button. Then the first line that will be shown on the screen is the close button. e.3. Next item in the array is the new line of the row which is the Getting started title. e.4. There is a certain format when declaring components within the screen. Please refer to some examples on other screens on how to add title, label, input field, buttons etc. For the example above, we have that format for adding a step title label e.5. All component that can be add with the wizard screen can be check in this folder: public/desktopweb/app/ui/views e.6. The last item on the rows arrays should be the footer buttons, which is ideally the next, back or submit button - f.1. This is usually fetchin the pcUtils.getFooterConfig function and we just need to declare what are the buttons on the right or left side of the footer. For example: e.7. wizard.navigateTo( * step Screen * ) this is where you need to declare which screen should be showns based on the added button. Declare the new screen in constants.js a. After you have setup the new screen, go to public/desktopweb/app/wizard/domino/constants.js b. Add a new item to STEPS object using the SNAKE_CASE format and the folder name (camelCase) c. The arrangement is based on the steps of the wizard flow. For example we want to add the new screen after the getting started, then we will add the new item after the GETTING_STARTED item. Declare the new screen in index.js a. To formally add the new screen within the wizard flow, go to public/desktopweb/app/wizard/domino/index.js b. Declare the new screen in the define section of the index.js . Take note of the arrangement of the declaration. If you add it as the fourth item, then the new function parameter should be on the fourth item c. Under the steps config, add a new array for the new screen. Since in our example we will add it after the Getting started screen, then we should add a new array after the Getting started array (Take note of the STEPS.ADD_NEW_SCREEN and the value of the getViewConfig. These are the values that we set on the constants.js and the define function) d. Even though we already declare the new screen in index.js, we still need to included this in one of the screens of the wizard. For example, we are assuming that after clicking the get started button in GETTING_STARTED screen, we will be redirected to the new screen e. We need to change the wizard.navigateTo of the getting started screen to redirect us to the ADD_NEW_SCREEN f. For every changes that we did on the code, we need to restart the IRIS app.","title":"Sample create new screen"},{"location":"iris/designImport/#current-flow","text":"SUBJECT TO CHANGE BASED ON REQUIREMENTS Getting Started Some description on what to expect on the wizard, parameters that are needed initially Associate Foundry App Before we can make use of the app, we need to make sure that there is already a foundry app linked to the current iris project. We can create a new one or use an existing one Unlink app is not working yet. Create Keep Services This is where we initialize the keep services in the foundry Only the Create New option is working. The select option is for development For the Create New, it will ask all the necessary details in creating keep services After adding all the details, a new set of keep integration services will be created in foundry The details of these needs to be updated. Connect to Keep Identity service You will be ask to login to keep identity service NSF Selection You will choose which nsf file to migrate. This will be improve later on Data Analysis This is where the pitcairn application will start. Ideally we will scan first the application and analyze the contents. Migration Option We have different routes to take but this is still subject to change. Always choose the first option Generate Forms After analyzing and determining the contents to be migrated, generating forms will be the next one Generate Foundry Services If there are still foundry services that needs to be migrated, we will add this in this part of the screen No functionality has been added yet on this part Connect to Foundry If there are mappings yet to be added Result Show if the migration is success or not","title":"Current Flow"},{"location":"iris/designImport/#adding-modules","text":"Modules are essential piece of the konywebstudio, you can mostly see the codes within kony as reusable set of codes that can be imported almost anywhere in the codes (but with certain format and exception of course) You will see all the modules, especially for the frontend side of IRIS in : public/desktopweb/app/modules If there are functions that are not available in konywebstudio, we need to create a module for that and we can create it under: public/desktopweb/app/modules/migration IMPORTANT: AVOID MODIFYING ANY MODULES THAT ARE NOT RELATED TO DESIGN IMPORT. PLEASE CONSULT IF YOU NEED TO MODIFY ONE Creating new module The usual format of a new module file is the following: Script guard Define function Return value Creating functions within module You can create it in two ways Using normal function return Using ns function (widely used in kony) (This utilizes ns parameter and strictly follow the format above.) This utilizes ns parameter and strictly follow the format above. Importing module into another module In order to define or reuse the module, you can declare it in define function method as mentioned in other section. Just take note that the path that you will add in the define method will depend on where the file is located","title":"Adding Modules"},{"location":"iris/installation/","text":"Installation VPN Make sure you are connected to a VPN (GlobalProtect/SafeLinx) throughout the process. if no VPN access yet, refer to this guideline to request for vpn access. SSH KEY Setup github ssh-key If no ssh key associated with your github account, refer to these links below: Connecting to GitHub with SSH Setting Up SSH Keys for GitHub External Dependencies Install Apache Ant Note: (these are the dependencies needed based from kbuild/bootscripts/externaldependencies.json) Refer to your machine OS below Mac Install Apache ant (make sure you have brew installed on your mac) brew install ant Windows Installing Apache Ant How to install Apache Ant on Windows 10 Binary Distributions How to check version in terminal? ant -version If not working: Go to your machine's Environment Variables Create a variable ANT_HOME and supply it with apache ant dependency's file path installed in your machine ( Ex: c:\\users\\username\\programfiles\\ant\\bin) In the System Variable Add a new Path Variable, add the ant file path ( Ex: c:\\users\\username\\programfiles\\ant) Install JAVA SDK 1.8 Click Java SDK 1.8 link to download the installer (x64 installer) How to Install Java on Mac | Install Java JDK on macOS video tutorial How to Set $JAVA_HOME environment variable on macOS How to Install Java JDK on Windows 10 || JDK 1.8 (2020) video tutorial Java Downloads (x64 installer) How to set JAVA_HOME on Windows 10? Install Nodejs 15.4 How to install Nodejs on Mac [Any version & Easy method] | 2022 video tutorial How to Update Node.js and NPM in the Terminal on Mac OS video tutorial How to Install Node js 16.15.1 on Windows 10 | Latest Node js Installation on Windows 10 video tutorial Nodejs Downloads Project Directory Create a directory/folder (suggested name: Iris) (Suggestion: Create this directory under same level of desktop, documentsm downloads, etc. Ex: Macintosh > Users > userprofile ) Inside the newly created project directory, clone via ssh the konywebstudio and hikes repos. See links below: Konywebstudio Note: our team branch is go-migration Git git clone git@github01.hclpnp.com:phoenix-core/konywebstudio.git git fetch origin go-migration git checkout go-migration Hikes git clone git@github01.hclpnp.com:phoenix-core/hikes.git Add a .npmrc file inside the root directory of konywebstudio . Inside this file, copy and paste the code below: registry=https://nexus.fnxlabs.com/repository/npm-all/ @phoenix:registry=https://nexus.fnxlabs.com/repository/phoenix/ Create a folder named build inside konywebstudio 's root folder/directory (Note: build folder will be just an empty folder.) In the terminal, cd to konywebstudio. Run the following command (according to machine OS). Mac Building the installer (if build failed, run the command again.) ant -f macbuild.xml After successful build, run this command to test if it is working. ./run_mach.hs Windows Install Node Package Manager npm install run this command to test if it is working. .\\run_win.bat Iris app will automatically opens up. Sample image below. Additional Troubleshooting Steps Install python How to install Python 3.10.4 on Windows 10 Run this command. (Make sure you are connected to Global Protect VPN and not Safelinx) if error appeared (example: VS/gype) on npm install, run on CMD Admin npm install --g --production windows-build-tools If successful, the end result should atleast look like this:","title":"Installation"},{"location":"iris/installation/#installation","text":"","title":"Installation"},{"location":"iris/installation/#vpn","text":"Make sure you are connected to a VPN (GlobalProtect/SafeLinx) throughout the process. if no VPN access yet, refer to this guideline to request for vpn access.","title":"VPN"},{"location":"iris/installation/#ssh-key","text":"Setup github ssh-key If no ssh key associated with your github account, refer to these links below: Connecting to GitHub with SSH Setting Up SSH Keys for GitHub","title":"SSH KEY"},{"location":"iris/installation/#external-dependencies","text":"Install Apache Ant Note: (these are the dependencies needed based from kbuild/bootscripts/externaldependencies.json) Refer to your machine OS below Mac Install Apache ant (make sure you have brew installed on your mac) brew install ant Windows Installing Apache Ant How to install Apache Ant on Windows 10 Binary Distributions How to check version in terminal? ant -version If not working: Go to your machine's Environment Variables Create a variable ANT_HOME and supply it with apache ant dependency's file path installed in your machine ( Ex: c:\\users\\username\\programfiles\\ant\\bin) In the System Variable Add a new Path Variable, add the ant file path ( Ex: c:\\users\\username\\programfiles\\ant) Install JAVA SDK 1.8 Click Java SDK 1.8 link to download the installer (x64 installer) How to Install Java on Mac | Install Java JDK on macOS video tutorial How to Set $JAVA_HOME environment variable on macOS How to Install Java JDK on Windows 10 || JDK 1.8 (2020) video tutorial Java Downloads (x64 installer) How to set JAVA_HOME on Windows 10? Install Nodejs 15.4 How to install Nodejs on Mac [Any version & Easy method] | 2022 video tutorial How to Update Node.js and NPM in the Terminal on Mac OS video tutorial How to Install Node js 16.15.1 on Windows 10 | Latest Node js Installation on Windows 10 video tutorial Nodejs Downloads","title":"External Dependencies"},{"location":"iris/installation/#project-directory","text":"Create a directory/folder (suggested name: Iris) (Suggestion: Create this directory under same level of desktop, documentsm downloads, etc. Ex: Macintosh > Users > userprofile ) Inside the newly created project directory, clone via ssh the konywebstudio and hikes repos. See links below: Konywebstudio Note: our team branch is go-migration Git git clone git@github01.hclpnp.com:phoenix-core/konywebstudio.git git fetch origin go-migration git checkout go-migration Hikes git clone git@github01.hclpnp.com:phoenix-core/hikes.git Add a .npmrc file inside the root directory of konywebstudio . Inside this file, copy and paste the code below: registry=https://nexus.fnxlabs.com/repository/npm-all/ @phoenix:registry=https://nexus.fnxlabs.com/repository/phoenix/ Create a folder named build inside konywebstudio 's root folder/directory (Note: build folder will be just an empty folder.) In the terminal, cd to konywebstudio. Run the following command (according to machine OS). Mac Building the installer (if build failed, run the command again.) ant -f macbuild.xml After successful build, run this command to test if it is working. ./run_mach.hs Windows Install Node Package Manager npm install run this command to test if it is working. .\\run_win.bat Iris app will automatically opens up. Sample image below.","title":"Project Directory"},{"location":"iris/installation/#additional-troubleshooting-steps","text":"Install python How to install Python 3.10.4 on Windows 10 Run this command. (Make sure you are connected to Global Protect VPN and not Safelinx) if error appeared (example: VS/gype) on npm install, run on CMD Admin npm install --g --production windows-build-tools If successful, the end result should atleast look like this:","title":"Additional Troubleshooting Steps"}]}